{
  "sd,debug": {
    "prefix": "sd,debug",
    "body": ["screen.debug(${1:renderer}.container) // @TODO: remove this"],
    "description": "screen.debug"
  },
  "desc": {
    "prefix": "desc",
    "body": ["describe('$1', () => {", "	it$0", "})"],
    "description": "describe block"
  },
  "it": {
    "prefix": "it",
    "body": ["it('$1', () => {", "	$0", "})"],
    "description": "it block"
  },
  "testgherkin": {
    "prefix": "testgherkin",
    "body": [
      "// https://www.guru99.com/gherkin-test-cucumber.html",
      "",
      "describe('GIVEN: $1', () => {",
      "	describe('WHEN: $2', () => {",
      "    it('THEN: $3', () => {",
      "			$0",
      "		})",
      "	})",
      "})"
    ],
    "description": "full test in the GIVEN WHEN THEN form (gherkin)"
  },
  "assert": {
    "prefix": "assert",
    "body": ["// assert", "expect(${1:actual}).toEqual(${2:expected})"],
    "description": "assert"
  },
  "arrange": {
    "prefix": "arrange",
    "body": ["// arrange", "$0"],
    "description": "arrange"
  },
  "testaaaa": {
    "prefix": "testaaaa",
    "body": [
      "// arrange",
      "const add = (a, b) => a + b",
      "const expected = 5",
      "const params = [2, 3]",
      "let actual = 0",
      "",
      "// assert",
      "expect(actual).toEqual(0)",
      "expect(params[0]).toEqual(2)",
      "expect(params[1]).toEqual(3)",
      "",
      "// act",
      "actual = add(...params)",
      "",
      "// assert",
      "expect(actual).toEqual(expected)"
    ],
    "description": "arrange assert act assert expand"
  },
  "tag": {
    "prefix": "tag",
    "body": ["	<${1:tag}>${2:content}</${1:tag}>"],
    "description": "<tag><tag>"
  },
  "tag2": {
    "prefix": "tag2",
    "body": ["	<${1:tag} ${2:attribute}>${3:content}</${1:tag}>"],
    "description": "<tag attributes=''><tag>"
  },
  "new,IntersectionObserver": {
    "prefix": "new,IntersectionObserver",
    "body": [
      "const [${2:isVisible}, set${2/\\w+\\s*/\\u$0/}] = useState(false)",
      "useEffect(() => {",
      "	$0const ${1:element} = document.querySelector('.${1:element}')",
      "	if (!${1:element} || !${2:isVisible}) return",
      "",
      "	const observer = new IntersectionObserver(([e]) => set${2/\\w+\\s*/\\u$0/}(e.isIntersecting), {",
      "		threshold: [${3:1}],",
      "		rootMargin: '0px 0px 0px 0px',",
      "		root: ${4:document.body},",
      "	})",
      "	observer.observe(${1:element})",
      "	observerRef.current = observer",
      "	return () => observer.disconnect()",
      "}, [${2:isVisible}])"
    ],
    "description": "new IntersectionObserver"
  },
  "rus,useState": {
    "prefix": "rus,useState",
    "body": ["const [$1, set${1/\\w+\\s*/\\u$0/}] = useState($3)"],
    "description": "useState"
  },
  "useState": {
    "prefix": "useState",
    "body": ["useState($1)"],
    "description": "useState"
  },
  "useEffect,help": {
    "prefix": "useEffect,help",
    "body": [
      "/*",
      " * useEffect(() => {}) // runs on every render",
      " * useEffect(() => {}, []) // runs on the first render",
      " * useEffect(() => {}, [deps]) // runs on the first render, and when deps change",
      " * useEffect(() => { return cleanUpFn}) // runs on the first render, and runs cleanUpFn before unmounting",
      "*/"
    ],
    "description": "useEffect help"
  },
  "rue,useEffect": {
    "prefix": "rue,useEffect",
    "body": [
      "useEffect(() => {",
      "	${2:codeblock}",
      "	${3:return () => \\{$4\\}}",
      "}, [${1:dependencies}])"
    ],
    "description": "useEffect"
  },
  "sfc,component,simple": {
    "prefix": "sfc,component,simple",
    "body": [
      "const ${1:Name} = ({ children, className, ...props }) => (",
      "  <div className={clsx('${1:Name}', className)} {...props}>",
      "		$0",
      "  </div>",
      ")"
    ],
    "description": "small functional component"
  },
  "fc,component,simple": {
    "prefix": "fc,component,simple",
    "body": [
      "import React from 'react'",
      "import clsx from 'clsx'",
      "",
      "import classes from './${1:Name}.module.scss'",
      "",
      "/** @type {import(\"./types\").default} */",
      "const ${1:Name} = ({ children, className, ...props }) => (",
      "  <div className={clsx('${1:Name}', className)} {...props}>",
      "		$0",
      "  </div>",
      ")",
      "",
      "export default ${1:Name}"
    ],
    "description": "functional component"
  },
  "types": {
    "prefix": "types",
    "body": ["/** @type {import(\"./types\").default} */"],
    "description": "import types.default"
  },
  "fc,component,extended": {
    "prefix": "fc,component,extended",
    "body": [
      "import React from 'react'",
      "import clsx from 'clsx'",
      "",
      "import classes from './${1:Name}.module.scss'",
      "",
      "/** @type {import(\"./types\").default} */",
      "const ${1:Name} = ({ children, className, ...props }) => {",
      "	$2",
      "  return (",
      "		<div className={clsx('${1:Name}', className)} {...props}>",
      "			$0",
      "		</div>",
      "	)",
      "}",
      "",
      "export default ${1:Name}"
    ],
    "description": "functional component 2"
  },
  "context": {
    "prefix": "context",
    "body": [
      "// 3rd party dependencies",
      "import { createContext, useContext, useState } from 'react'",
      "",
      "// absolute imports",
      "",
      "// local imports",
      "",
      "const defaults = {",
      "  isDark: false,",
      "}",
      "",
      "export const Context = createContext(defaults)",
      "",
      "export const ContextProvider = ({ children }) => {",
      "  const [isDark, setDark] = useState(defaults.isDark)",
      "",
      "  const toggleDark = () => {",
      "    setDark(!isDark)",
      "  }",
      "",
      "  return <Context.Provider value={{ isDark, toggleDark }}>{children}</Context.Provider>",
      "}",
      "",
      "export const useContext = () => useContext(Context)"
    ],
    "description": "context with provider"
  },
  "useEventContext": {
    "prefix": "useEventContext",
    "body": [
      "import { useEventContext } from 'context/EventContext'",
      "",
      "const eventContent = useEventContext({",
      "	eventCategory: '${1:no-results}',",
      "	eventAction: '${2:display_all-results}',",
      "	eventLabel: '${3:text-link_view-all}',",
      "	eventGA4Name: '${4:engagement_search}',",
      ")}"
    ],
    "description": "event context"
  },
  "td": {
    "prefix": "td",
    "body": ["// @TODO: ${1:something}"],
    "description": "// @TODO:"
  },
  "clv": {
    "prefix": "clv",
    "body": ["console.log('____ ${1:variable}:', ${1:variable}) // @TODO: delete this"],
    "description": "console.log"
  },
  "cl": {
    "prefix": "cl",
    "body": ["console.log('____ $1') // @TODO: delete this"],
    "description": "console.log"
  },
  "afn,arrow,function": {
    "prefix": "afn,arrow,function",
    "body": ["($1) => $2"],
    "description": "arrow function"
  },
  "afn2,arrow,function": {
    "prefix": "afn2,arrow,function",
    "body": ["(${1:}) => {", "	${2:}", "}"],
    "description": "Arrow function () => {}"
  },
  "aafn": {
    "prefix": "aafn",
    "body": ["const $1 = $2 => $3"],
    "description": "anoymous arrow function"
  },
  "caf": {
    "prefix": "caf",
    "body": ["const $1 = $2 => $3"],
    "description": "anoymous arrow function"
  },
  "rc": {
    "prefix": "rc",
    "body": ["const $1 = () => (", "	$3", ")"],
    "description": "refactorComponent"
  },
  "tern": {
    "prefix": "tern",
    "body": ["${1:condition} ? ${2:true} : ${3:false}"],
    "description": "ternary singleline"
  },
  "tern2": {
    "prefix": "tern2",
    "body": ["${1:condition}", "	? ${2:true}", "	: ${3:false}"],
    "description": "ternary multiline"
  },
  "tern3,nested": {
    "prefix": "tern3,nested",
    "body": [
      "${1:age < 18}",
      "	? ${2:'young'}",
      "	: ${3:age < 30}",
      "	? ${4:'young adult'}",
      "	: ${6:'adult'}"
    ],
    "description": "ternary nested"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "const ${1:specie} = {",
      "  '${2:human}': ${3:'homo sapiens sapiens'},",
      "  '${3:dog}': ${4:'canis familiaris'},",
      "  '${5:cat}': ${6:'felis catus'},",
      "  ${7:undefined}: ${8:'unknown'}",
      "}[${9:}'human']"
    ],
    "description": "no switch case allowed"
  },
  "imports": {
    "prefix": "imports",
    "body": ["// 3rd party dependencies", "", "// absolute imports", "", "// local imports"],
    "description": "show imports"
  },
  "import,statement": {
    "prefix": "import,statement",
    "body": ["import ${2:React} from '${1:react}'"],
    "description": "import statement"
  },
  "/*": {
    "prefix": "/*",
    "body": ["/*", " * $0", " */"],
    "description": "multiline comment"
  },
  "rur,useRef": {
    "prefix": "rur,useRef",
    "body": ["const $1 = useRef(${2:null})"],
    "description": "useRef"
  },
  "comp": {
    "prefix": "comp",
    "body": [
      "const ${1:Name} = ({ children, className, ...props }) => (",
      "  <div className={clsx('${1:Name}', className)} {...props}>",
      "		$0",
      "  </div>",
      ")"
    ],
    "description": "small functional component"
  },
  "newfc,component,simple": {
    "prefix": "newfc,component,simple",
    "body": [
      "import React from 'react'",
      "import clsx from 'clsx'",
      "",
      "import classes from './${1:Name}.module.scss'",
      "",
      "/** @type {import(\"./types\").default} */",
      "const ${1:Name} = ({ children, className, ...props }) => (",
      "  <div className={clsx('${1:Name}', className)} {...props}>",
      "		$0",
      "  </div>",
      ")",
      "",
      "export default ${1:Name}"
    ],
    "description": "new functional component"
  },
  "newfc,component,extended": {
    "prefix": "newfc,component,extended",
    "body": [
      "import React from 'react'",
      "import clsx from 'clsx'",
      "",
      "import classes from './${1:Name}.module.scss'",
      "",
      "/** @type {import(\"./types\").default} */",
      "const ${1:Name} = ({ children, className, ...props }) => {",
      "	$2",
      "  return (",
      "		<div className={clsx('${1:Name}', className)} {...props}>",
      "			$0",
      "		</div>",
      "	)",
      "}",
      "",
      "export default ${1:Name}"
    ],
    "description": "new functional component 2"
  },
  "dyn": {
    "prefix": "dyn",
    "body": ["import dynamic from 'next/dynamic'", "const $1 = dynamic(() => import('$2'))"],
    "description": "dynamic(() => import ('X'))"
  },
  "isDev": {
    "prefix": "isDev",
    "body": ["const dev = process.env.NODE_ENV !== 'production'"],
    "description": "process.env.NODE_ENV is dev"
  },
  "isProd": {
    "prefix": "isProd",
    "body": ["const prod = process.env.NODE_ENV === 'production'"],
    "description": "process.env.NODE_ENV is prod"
  },
  "newsoftwarecategory": {
    "prefix": "newsoftwarecategory",
    "body": [
      "{",
      "	id: '${1:accounting}',",
      "	title: '${1:accounting}',",
      "	url: '${2:url}',",
      "	icon: ['ic', '${3:iconname}'],",
      "},"
    ],
    "description": "softwarecategory"
  },
  "Function Statement": {
    "prefix": "fn",
    "body": ["function ${1:name}(${2:params}:${3:type}) {", "	$0", "}"],
    "description": "Function Statement"
  },
  "debounce fn": {
    "prefix": "debounce",
    "body": [
      "function debounce(func, delay) {",
      "  let timeoutId;",
      "  return function (...args) {",
      "    clearTimeout(timeoutId);",
      "    timeoutId = setTimeout(() => func.apply(this, args), delay);",
      "  };",
      "}",
      "",
      "// Example usage:",
      "window.addEventListener('resize', debounce(() => {",
      "  console.log('Window resized');",
      "}, 500));",
      ""
    ],
    "description": "Debounce function"
  },
  "throttle fn": {
    "prefix": "throttle",
    "body": [
      "function throttle(func, delay) {",
      "  let lastTime = 0;",
      "  return function (...args) {",
      "    const now = new Date().getTime();",
      "    if (now - lastTime >= delay) {",
      "      func.apply(this, args);",
      "      lastTime = now;",
      "    }",
      "  };",
      "}",
      "",
      "// Example usage:",
      "window.addEventListener('scroll', throttle(() => {",
      "  console.log('Scroll event triggered');",
      "}, 500));"
    ],
    "description": "throttle fn"
  },
  "curry fn": {
    "prefix": "curry",
    "body": [
      "function curry(func) {",
      "  return function curried(...args) {",
      "    if (args.length >= func.length)",
      "      return func.apply(this, args);",
      "    return function (...nextArgs) {",
      "      return curried.apply(this, args.concat(nextArgs));",
      "    }",
      "  };",
      "}",
      "",
      "// Example usage:",
      "function sum(a, b, c) {",
      "  return a + b + c;",
      "}",
      "",
      "const curriedSum = curry(sum);",
      "console.log(curriedSum(1)(2)(3)); // Output: 6"
    ],
    "description": "curry fn"
  },
  "memoize fn": {
    "prefix": "memoize",
    "body": [
      "function memoize(func) {",
      "  const cache = {};",
      "  return function (...args) {",
      "    const key = JSON.stringify(args);",
      "    if (cache[key]) return cache[key];",
      "    const result = func.apply(this, args);",
      "    cache[key] = result;",
      "    return result;",
      "  };",
      "}",
      "",
      "// Example usage:",
      "const factorial = memoize(function (n) {",
      "  if (n <= 1) return 1;",
      "  return n * factorial(n - 1);",
      "});",
      "",
      "console.log(factorial(5)); // Output: 120",
      "console.log(factorial(5)); // Output: 120 (from cache)"
    ],
    "description": "memoize fn"
  },
  "deepClone": {
    "prefix": "deepClone",
    "body": [
      "function deepClone(obj) {",
      "  if (obj === null || typeof obj !== 'object')",
      "    return obj;",
      "",
      "  if (Array.isArray(obj))",
      "    return obj.map(deepClone);",
      "",
      "  const clonedObj = {};",
      "  for (const key in obj)",
      "    clonedObj[key] = deepClone(obj[key]);",
      "  return clonedObj;",
      "}",
      "",
      "// Example usage:",
      "const original = { a: 1, b: { c: 2 } };",
      "const copy = deepClone(original);",
      "",
      "console.log(copy); // Output: { a: 1, b: { c: 2 } }",
      "console.log(copy.b === original.b); // Output: false"
    ],
    "description": "deepClone"
  }
}
