
snippet tag "<tag><tag>" b
	<${1:tag}>${2:content}</${1:tag}>
endsnippet

snippet tag2 "<tag attributes=''><tag>" b
	<${1:tag} ${2:attribute}>${3:content}</${1:tag}>
endsnippet

snippet new,IntersectionObserver "new IntersectionObserver" b
const [${2:isVisible}, set${2/\w+\s*/\u$0/}] = useState(false)
useEffect(() => {
	$0const ${1:element} = document.querySelector('.${1:element}')
	if (!${1:element} || !${2:isVisible}) return

	const observer = new IntersectionObserver(([e]) => set${2/\w+\s*/\u$0/}(e.isIntersecting), {
		threshold: [${3:1}],
		rootMargin: '0px 0px 0px 0px',
		root: ${4:document.body},
	})
	observer.observe(${1:element})
	observerRef.current = observer
	return () => observer.disconnect()
}, [${2:isVisible}])
endsnippet

# Hooks

snippet rus,useState "useState" b
const [$1, set${1/\w+\s*/\u$0/}] = useState($3)
endsnippet

snippet useState "useState" i
useState($1)
endsnippet

snippet useEffect,help "useEffect help" b
/*
 * useEffect(() => {}) // runs on every render
 * useEffect(() => {}, []) // runs on the first render
 * useEffect(() => {}, [deps]) // runs on the first render, and when deps change
 * useEffect(() => { return cleanUpFn}) // runs on the first render, and runs cleanUpFn before unmounting
*/
endsnippet

snippet rue,useEffect "useEffect" b
useEffect(() => {
	${2:codeblock}
	${3:return () => \{$4\}}
}, [${1:dependencies}])
endsnippet

snippet sfc,component,simple "small functional component" b
const ${1:Name} = ({ children, className, ...props }) => (
  <div className={clsx('${1:Name}', className)} {...props}>
		$0
  </div>
)
endsnippet

snippet fc,component,simple "functional component" b
import React from 'react'
import clsx from 'clsx'

import classes from './${1:Name}.module.scss'

/** @type {import("./types").default} */
const ${1:Name} = ({ children, className, ...props }) => (
  <div className={clsx('${1:Name}', className)} {...props}>
		$0
  </div>
)

export default ${1:Name}
endsnippet

snippet types "import types.default" b
/** @type {import("./types").default} */
endsnippet

snippet fc,component,extended "functional component 2" b
import React from 'react'
import clsx from 'clsx'

import classes from './${1:Name}.module.scss'

/** @type {import("./types").default} */
const ${1:Name} = ({ children, className, ...props }) => {
	$2
  return (
		<div className={clsx('${1:Name}', className)} {...props}>
			$0
		</div>
	)
}

export default ${1:Name}
endsnippet

snippet context "context with provider" b
// 3rd party dependencies
import { createContext, FunctionComponent, useContext, useState } from 'react'

// absolute imports

// local imports

interface ContextType {
  isDark: boolean
  toggleDark?: () => void
}
const defaults = {
  isDark: false,
}

export const Context = createContext<ContextType>(defaults)

export const ContextProvider: FunctionComponent = ({ children }) => {
  const [isDark, setDark] = useState(defaults.isDark)

  const toggleDark = () => {
    setDark(!isDark)
  }

  return <Context.Provider value={{ isDark, toggleDark }}>{children}</Context.Provider>
}

export const useContext = () => useContext(Context)
endsnippet

snippet useEventContext "event context" b
import { useEventContext } from 'context/EventContext'

const eventContent = useEventContext({
	eventCategory: '${1:no-results}',
	eventAction: '${2:display_all-results}',
	eventLabel: '${3:text-link_view-all}',
	eventGA4Name: '${4:engagement_search}',
)}
endsnippet
