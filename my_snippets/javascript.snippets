extends testing
extends react

snippet td "// @TODO:" i
// @TODO: ${1:something}
endsnippet

snippet types "add default import types" b
/** @type {import("./types").default} */
endsnippet

snippet clv "console.log" i
console.log('____ ${1:variable}:', ${1:variable}) // @TODO: delete this
endsnippet

snippet cl "console.log" i
console.log('____ $1') // @TODO: delete this
endsnippet

snippet afn,arrow,function "arrow function" i
($1) => $2
endsnippet

snippet afn2,arrow,function "Arrow function () => {}" i
(${1:}) => {
	${2:}
}
endsnippet

snippet aafn "anoymous arrow function" A
const $1 = $2 => $3
endsnippet

snippet caf "anoymous arrow function" A
const $1 = $2 => $3
endsnippet

snippet rc "refactorComponent" A
const $1 = () => (
	$3
)
endsnippet

snippet tern "ternary singleline" i
${1:condition} ? ${2:true} : ${3:false}
endsnippet

snippet tern2 "ternary multiline" i
${1:condition}
	? ${2:true}
	: ${3:false}
endsnippet

snippet tern3,nested "ternary nested" i
${1:age < 18}
	? ${2:'young'}
	: ${3:age < 30}
	? ${4:'young adult'}
	: ${6:'adult'}
endsnippet

snippet switch "no switch case allowed" i
const ${1:specie} = {
  '${2:human}': ${3:'homo sapiens sapiens'},
  '${3:dog}': ${4:'canis familiaris'},
  '${5:cat}': ${6:'felis catus'},
  ${7:undefined}: ${8:'unknown'}
}[${9:}'human']
endsnippet

snippet imports "show imports" b
// 3rd party dependencies

// absolute imports

// local imports
endsnippet

snippet import,statement "import statement" b
import ${2:React} from '${1:react}'
endsnippet

snippet /* "multiline comment" A
/*
 * $0
 */
endsnippet

snippet tag "<tag><tag>" b
	<${1:tag}>${2:content}</${1:tag}>
endsnippet

snippet tag2 "<tag attributes=''><tag>" b
	<${1:tag} ${2:attribute}>${3:content}</${1:tag}>
endsnippet

snippet new,IntersectionObserver "new IntersectionObserver" b
const [${2:isVisible}, set${2/\w+\s*/\u$0/}] = useState(false)
useEffect(() => {
	$0const ${1:element} = document.querySelector('.${1:element}')
	if (!${1:element} || !${2:isVisible}) return

	const observer = new IntersectionObserver(([e]) => set${2/\w+\s*/\u$0/}(e.isIntersecting), {
		threshold: [${3:1}],
		rootMargin: '0px 0px 0px 0px',
		root: ${4:document.body},
	})
	observer.observe(${1:element})
	observerRef.current = observer
	return () => observer.disconnect()
}, [${2:isVisible}])
endsnippet

# Hooks

snippet rus,useState "useState" b
const [$1, set${1/\w+\s*/\u$0/}] = useState($3)
endsnippet

snippet useState "useState" i
useState($1)
endsnippet

snippet rur,useRef "useRef" b
const $1 = useRef(${2:null})
endsnippet

snippet useEffect,help "useEffect help" b
/*
 * useEffect(() => {}) // runs on every render
 * useEffect(() => {}, []) // runs on the first render
 * useEffect(() => {}, [deps]) // runs on the first render, and when deps change
 * useEffect(() => { return cleanUpFn}) // runs on the first render, and runs cleanUpFn before unmounting
*/
endsnippet

snippet rue,useEffect "useEffect" b
useEffect(() => {
	${2:codeblock}
	${3:return () => \{$4\}}
}, [${1:dependencies}])
endsnippet

snippet comp "small functional component" b
const ${1:Name} = ({ children, className, ...props }) => (
  <div className={clsx('${1:Name}', className)} {...props}>
		$0
  </div>
)
endsnippet

snippet newfc,component,simple "new functional component" b
import React from 'react'
import clsx from 'clsx'

import classes from './${1:Name}.module.scss'

/** @type {import("./types").default} */
const ${1:Name} = ({ children, className, ...props }) => (
  <div className={clsx('${1:Name}', className)} {...props}>
		$0
  </div>
)

export default ${1:Name}
endsnippet

snippet types "import types.default" b
/** @type {import("./types").default} */
endsnippet

snippet newfc,component,extended "new functional component 2" b
import React from 'react'
import clsx from 'clsx'

import classes from './${1:Name}.module.scss'

/** @type {import("./types").default} */
const ${1:Name} = ({ children, className, ...props }) => {
	$2
  return (
		<div className={clsx('${1:Name}', className)} {...props}>
			$0
		</div>
	)
}

export default ${1:Name}
endsnippet

snippet context "context with provider" b
// 3rd party dependencies
import { createContext, useContext, useState } from 'react'

// absolute imports

// local imports

const defaults = {
  isDark: false,
}

export const Context = createContext(defaults)

export const ContextProvider = ({ children }) => {
  const [isDark, setDark] = useState(defaults.isDark)

  const toggleDark = () => {
    setDark(!isDark)
  }

  return <Context.Provider value={{ isDark, toggleDark }}>{children}</Context.Provider>
}

export const useContext = () => useContext(Context)
endsnippet

snippet useEventContext "event context" b
import { useEventContext } from 'context/EventContext'

const eventContent = useEventContext({
	eventCategory: '${1:no-results}',
	eventAction: '${2:display_all-results}',
	eventLabel: '${3:text-link_view-all}',
	eventGA4Name: '${4:engagement_search}',
)}
endsnippet

snippet dyn "dynamic(() => import ('X'))" b
import dynamic from 'next/dynamic'
const $1 = dynamic(() => import('$2'))
endsnippet

snippet isDev "process.env.NODE_ENV is dev" b
const dev = process.env.NODE_ENV !== 'production'
endsnippet

snippet isProd "process.env.NODE_ENV is prod" b
const prod = process.env.NODE_ENV === 'production'
endsnippet

snippet newsoftwarecategory "softwarecategory" b
{
	id: '${1:accounting}',
	title: '${1:accounting}',
	url: '${2:url}',
	icon: ['ic', '${3:iconname}'],
},
endsnippet
